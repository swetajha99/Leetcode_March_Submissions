Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

class Solution {
    public int maxProduct(int[] nums) {
        int max_prod = nums[0];
        int curr_max = 1, curr_min = 1; 
        
        for(int i=0;i<nums.length;i++){
          if(nums[i]==0){ curr_max = 1; curr_min = 1; }
            
         int temp = curr_max* nums[i];
         curr_max = Math.max(nums[i], Math.max(curr_max*nums[i], curr_min*nums[i]));
         curr_min = Math.min(nums[i], Math.min(temp, curr_min*nums[i]));
         max_prod = Math.max(max_prod, curr_max);
        }
        return max_prod;
    }
}
