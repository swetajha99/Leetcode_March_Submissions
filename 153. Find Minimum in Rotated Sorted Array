153. Find Minimum in Rotated Sorted Array

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.










Here the properties that can be observed are as follows :

for every part of the sorted array the right element should be greater than current element.
only if it belongs to different parts of the sorted section they will contradict this property and hence that right element should be the minimum element.

similarly the left element should be smaller that the current element if this proprty is contradictory it means we found the minimum element, 
 
 
 class Solution {
 	public int findMin(int[] arr) {
 		int low = 0;
 		int high = arr.length-1;

 		if(arr[low]<=arr[high]){
 			return arr[0];
 		}

 		while(low<=high){
 			int mid = (low+high)/2;

 			if(arr[mid]>arr[mid+1]){
 				return arr[mid+1];
 			}
 			else if(arr[mid]<arr[mid-1]){
 				return arr[mid];
 			}
 			else if(arr[low]<=arr[mid]){
 				low = mid+1;
 			}
 			else if(arr[high]>=arr[mid]){
 				high = mid-1;
 			}
 		}

 		return -1;
 	}
 }
